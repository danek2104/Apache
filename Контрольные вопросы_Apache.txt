№1.Что такое веб-сервер и для чего нужна эта программа?
* Что это: Веб-сервер — это специализированное программное обеспечение (или компьютер, на котором оно постоянно запущено), основная задача которого — обрабатывать входящие запросы от клиентов (обычно веб-браузеров) по протоколу HTTP(S) и возвращать им ответы.
* Для чего нужен:
   * Прием запросов: Получает запросы (например, "GET /index.html HTTP/1.1").
   * Обработка запросов: Определяет, какой ресурс (HTML-страница, изображение, CSS, JS файл, данные API) запрошен.
   * Поиск ресурса: Находит запрошенный файл или передает запрос обработчику (например, PHP, Python, Node.js) для динамической генерации контента.
   * Формирование ответа: Создает HTTP-ответ, включающий:
      * Статус-код (200 OK, 404 Not Found, 500 Internal Server Error и т.д.).
      * Заголовки (Headers) (информация о типе контента, кодировке, кэшировании, куках и т.д.).
      * Тело ответа (Body) (собственно запрошенные данные: HTML, изображение, JSON и т.п.).
   * Отправка ответа: Передает сформированный ответ обратно клиенту (браузеру).
   * Управление соединениями: Обрабатывает множественные одновременные соединения.
   * Безопасность: Реализует базовые механизмы безопасности (например, SSL/TLS через HTTPS).
   * Ведение журналов (Logging): Записывает информацию о запросах и ошибках.
* Примеры ПО: Apache HTTP Server, Nginx, Microsoft IIS, LiteSpeed, Caddy.
№2.Что такое рабочая директория веб-сервера?
Определение: Это корневой каталог файловой системы сервера, относительно которого веб-сервер ищет запрашиваемые файлы и выполняет скрипты. Часто называется Document Root или Web Root.
Для чего нужна:
* Безопасность: Ограничивает доступ клиентов только к файлам внутри этой директории и ее поддиректориях. Файлы вне этой папки обычно недоступны извне через веб-сервер.
* Организация: Позволяет четко отделить файлы, доступные публично через веб (HTML, CSS, JS, изображения) от конфиденциальных файлов конфигурации сервера, скриптов приложений или системных файлов.
* Относительные пути: Упрощает указание путей к файлам внутри веб-приложения (например, /images/logo.png будет искаться относительно Document Root).
Пример: Если Document Root установлен в /var/www/my-site/public_html/, то запрос http://ваш-сайт.com/about.html будет искать файл по пути /var/www/my-site/public_html/about.html


№3.Основные настройки сервера Apache. Файл настроек.


* Основной файл конфигурации: Обычно называется httpd.conf или apache2.conf. Расположение зависит от ОС и способа установки (напр., в Ubuntu часто /etc/apache2/apache2.conf).
* Директивы конфигурации: Настройки задаются с помощью директив.
* Ключевые настройки (директивы):
   * ServerRoot: Корневая директория установки Apache (где лежат его бинарники и основные конфиги).
   * Listen: Порт (и опционально IP-адрес), на котором Apache будет принимать входящие соединения (например, Listen 80, Listen 443, Listen 192.168.1.10:8080).
   * ServerName: Имя хоста и порт, которое сервер использует для идентификации себя (например, www.example.com:80). Важно для виртуальных хостов.
   * DocumentRoot: Самая важная! Указывает путь к рабочей директории (Web Root) по умолчанию (например, DocumentRoot "/var/www/html").
   * <Directory>: Позволяет задавать настройки (разрешения, опции) для конкретной директории в файловой системе и ее поддиректорий. Критически важна для безопасности и функциональности.
   * ErrorLog и CustomLog: Пути к файлам журналов ошибок и доступа соответственно.
   * LoadModule: Загружает необходимые модули Apache (mod_rewrite, mod_ssl, mod_php и т.д.).
   * Include / IncludeOptional: Позволяет подключать дополнительные конфигурационные файлы (например, файлы виртуальных хостов из папки sites-enabled/).
   * User / Group: От имени какого пользователя/группы ОС Apache будет обрабатывать запросы (важно для безопасности прав доступа к файлам).
* Дополнительные файлы:
   * ports.conf: Часто содержит настройки портов (Listen).
   * conf-enabled/, sites-enabled/: Папки со ссылками на конфиги из conf-available/ и sites-available/ соответственно. Такой подход (available/enabled) упрощает управление конфигурацией.
   * .htaccess: Файлы в конкретных директориях, которые могут переопределять настройки основного конфига для этой директории и ее поддиректорий (если разрешено директивой AllowOverride в основном конфиге). Используются для управления доступом, ЧПУ (mod_rewrite) и т.д.


№4.Что такое виртуальные хосты веб-сервера? Как настроить их в Apache?


Что это: Технология, позволяющая одному физическому серверу (одному IP-адресу) обслуживать несколько разных веб-сайтов (доменов). Клиент обращается к конкретному сайту по его доменному имени, а Apache определяет, какой именно сайт (какая рабочая директория) соответствует этому имени, и отдает его содержимое.
Для чего нужны: Экономия серверных ресурсов, простота управления множеством сайтов на одной машине.


№5.Что такое файл hosts, где он находится в Windows и Linux, какой его формат и для чего он нужен?
Что это: Простой текстовый файл, который сопоставляет имена хостов (домены) с IP-адресами на уровне операционной системы. Это локальная альтернатива системе DNS.
Для чего нужен:
* Тестирование сайтов: Указать локальной машине, что домен ваш-тестовый-сайт.com должен вести на IP вашего локального веб-сервера (127.0.0.1) или сервера в локальной сети (192.168.1.10), до того, как настоящий DNS-запись будет создана.
* Блокировка сайтов: Направить нежелательные домены на несуществующий IP (например, 127.0.0.1 или 0.0.0.0).
* Разработка: Тестирование конфигурации виртуальных хостов на локальной машине.
* Обход DNS: Временное решение, если DNS не работает или нужно принудительно использовать определенный IP.
Расположение:
* Windows: C:\Windows\System32\drivers\etc\hosts
* Linux (и macOS): /etc/hosts
Формат:
* Каждая строка — одна запись.
* Синтаксис: IP-адрес имя_хоста [имя_хоста_2 ...]
* # — символ комментария (всё после него игнорируется).




№6.Какова основная структура HTML-файла?
Ключевые элементы структуры:
1. <!DOCTYPE html>: Обязательное объявление в самом начале. Сообщает браузеру, что это документ HTML5.
2. <html>: Корневой элемент, охватывающий весь документ. Атрибут lang важен для доступности и SEO.
3. <head>: Контейнер для метаданных. Содержимое внутри <head> не отображается на самой странице, но критически важно для ее работы и представления.
   * <meta charset="UTF-8">: Обязателен. Указывает кодировку символов (UTF-8 поддерживает кириллицу и большинство языков).
   * <meta name="viewport" ...>: Рекомендован для создания адаптивных (responsive) сайтов, корректно отображающихся на мобильных устройствах.
   * <title>: Обязателен. Задает заголовок страницы, отображаемый во вкладке/окне браузера и в результатах поиска.
   * <link>: Используется для подключения внешних ресурсов, чаще всего CSS-стилей (rel="stylesheet").
   * <script>: Используется для встраивания или подключения JavaScript-кода. Атрибут defer (или async) управляет временем выполнения.
   * <style>: Для встраивания CSS-кода непосредственно в HTML (менее предпочтительно, чем внешние файлы).
4. <body>: Контейнер для всего видимого содержимого страницы: тексты, заголовки (<h1>-<h6>), абзацы (<p>), изображения (<img>), ссылки (<a>), списки (<ul>, <ol>), таблицы (<table>), формы (<form>), разделы (<div>, <section>, <header>, <footer>, <article>, <nav>, <main>, <aside>) и т.д.